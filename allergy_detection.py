# -*- coding: utf-8 -*-
"""allergy_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V1WyarAC1iOZw_ckpC5Rzlh8cQrmslHW
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load dataset (replace 'your_dataset.csv' with actual filename)
df = pd.read_csv('ingredient_allergy_dataset.csv')

# Drop duplicate rows (if any)
df.drop_duplicates(inplace=True)

# Check for missing values
print("Missing Values:\n", df.isnull().sum())

# Fill or drop missing values if needed
df.dropna(inplace=True)  # Drop rows with missing values

# Display first few rows
df.head()

!pip install gradio --quiet

import gradio as gr
import pandas as pd
import re


# Load dataset
df = pd.read_csv("ingredient_allergy_dataset.csv")  # Ensure file is uploaded
lookup_dict = dict(zip(df["Ingredient"].str.lower(), df["Allergy Name"]))

# Common prefixes to remove
PREFIXES = ["fresh", "organic", "raw", "pure", "natural"]

def clean_ingredient(ingredient):
    ingredient = ingredient.lower().strip()
    ingredient = re.sub(r'\b(' + '|'.join(PREFIXES) + r')\b', '', ingredient).strip()
    return ingredient

def get_allergy(ingredient):
    ingredient = clean_ingredient(ingredient)
    if ingredient in lookup_dict:
        return lookup_dict[ingredient]

    # Optional: Use fuzzy matching if exact match isn't found
    closest_match, score = process.extractOne(ingredient, lookup_dict.keys())
    if score > 80:  # If confidence is high, return the closest match
        return f"Did you mean '{closest_match}'? Allergy: {lookup_dict[closest_match]}"

    return "Unknown Allergy"

# Gradio UI
iface = gr.Interface(
    fn=get_allergy,
    inputs=gr.Textbox(label="Enter Ingredient"),
    outputs=gr.Textbox(label="Allergy Type"),
    title="Food Allergy Detector",
    description="Enter an ingredient, and I'll tell you the allergy it may cause!"
)

iface.launch()

import os
from os.path import join


hot_dog_image_dir = '../input/hot-dog-not-hot-dog/seefood/train/hot_dog'

hot_dog_paths = [join(hot_dog_image_dir,filename) for filename in
                            ['1000288.jpg',
                             '127117.jpg']]

not_hot_dog_image_dir = '../input/hot-dog-not-hot-dog/seefood/train/not_hot_dog'
not_hot_dog_paths = [join(not_hot_dog_image_dir, filename) for filename in
                            ['823536.jpg',
                             '99890.jpg']]

img_paths = hot_dog_paths + not_hot_dog_paths

!pip install tensorflow numpy learntools

import tensorflow as tf
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.efficientnet import preprocess_input, decode_predictions
import numpy as np

# Load Pretrained EfficientNet Model
model = EfficientNetB0(weights='imagenet')

def predict_food(image_path):
    img = image.load_img(image_path, target_size=(224, 224))  # Resize image
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)  # Expand dimensions for model
    img_array = preprocess_input(img_array)  # Preprocess for EfficientNet

    preds = model.predict(img_array)  # Make predictions
    decoded_preds = decode_predictions(preds, top=3)[0]  # Get top 3 predictions
    return decoded_preds

# Example Usage
image_path = "food1.jpg"
food_predictions = predict_food(image_path)
print(food_predictions)  # Returns food item predictions

from transformers import pipeline

# Load the food classification model
classifier = pipeline("image-classification", model="nateraw/food")

# Predict food item
predictions = classifier("food1.jpg")

# Select the most confident prediction
top_prediction = max(predictions, key=lambda x: x['score'])

# Extract the food label
predicted_food = top_prediction['label']

print(f"Predicted Food: {predicted_food} (Confidence: {top_prediction['score']:.2f})")

!pip install requests pillow

API_KEY = "ae7c5719fd524c988a5a3582db67890a"

#API_KEY = "AKuqEr7Zmd17eniIPejLiJ4WYCBCFtgsK1Zq8RdJ"

!pip install requests fuzzywuzzy

!pip install pytesseract transformers fuzzywuzzy pytesseract gradio pipeline

!pip install SpeechRecognition

from transformers import pipeline
import requests
import gradio as gr
import pandas as pd
import re
from fuzzywuzzy import process
import pytesseract
from PIL import Image
import moviepy.editor as mp
import speech_recognition as sr

API_KEY = "ae7c5719fd524c988a5a3582db67890a"

# Load food classification model
classifier = pipeline("image-classification", model="nateraw/food")

# Load allergy dataset
# Ensure 'ingredient_allergy_dataset.csv' is uploaded to Colab
df = pd.read_csv("ingredient_allergy_dataset.csv")  # Replace with your dataset path
lookup_dict = dict(zip(df["Ingredient"].str.lower(), df["Allergy Name"]))

# Spoonacular API Key (replace with your own key)
SPOONACULAR_API_KEY = API_KEY

# Common prefixes to remove
PREFIXES = ["fresh", "organic", "raw", "pure", "natural"]

!pip install moviepy SpeechRecognition

# Data structure to store user profiles (in memory)
user_profiles = {}

# Load the alternatives dataset
alternatives_data = pd.read_excel("allergealternatives.xlsx")

# Create a mapping between allergies and alternatives
allergy_to_alternatives = alternatives_data.groupby("Allergy Name")["Alternatives"].apply(list).to_dict()

# Get a list of all allergy names for fuzzy matching
allergy_names = list(allergy_to_alternatives.keys())

def clean_ingredient(ingredient):
    """Normalize ingredient names (remove prefixes, lowercase)"""
    ingredient = ingredient.lower().strip()
    ingredient = re.sub(r'\b(' + '|'.join(PREFIXES) + r')\b', '', ingredient).strip()
    return ingredient

def get_allergy(ingredient):
    """Check if ingredient has an associated allergy"""
    ingredient = clean_ingredient(ingredient)
    if ingredient in lookup_dict:
        return lookup_dict[ingredient]

    # Use fuzzy matching if exact match isn't found
    closest_match, score = process.extractOne(ingredient, lookup_dict.keys())
    if score > 80:  # If confidence is high, return the closest match
        return lookup_dict[closest_match]

    return "Unknown Allergy"

def predict_food(image_path):
    """Predict the food item from the image."""
    predictions = classifier(image_path)

    # Select the most confident prediction
    top_prediction = max(predictions, key=lambda x: x['score'])
    predicted_food = top_prediction['label']

    print(f"Predicted Food: {predicted_food} (Confidence: {top_prediction['score']:.2f})")
    return predicted_food

def get_ingredients_from_spoonacular(food_name):
    """Fetch raw ingredient breakdown using Spoonacular API."""
    url = "https://api.spoonacular.com/recipes/complexSearch"
    params = {
        "query": food_name,
        "number": 1,  # Get the best match
        "apiKey": SPOONACULAR_API_KEY
    }

    response = requests.get(url, params=params)
    data = response.json()

    if "results" in data and len(data["results"]) > 0:
        recipe_id = data["results"][0]["id"]

        # Fetch recipe details to get ingredients
        details_url = f"https://api.spoonacular.com/recipes/{recipe_id}/information"
        details_params = {"apiKey": SPOONACULAR_API_KEY}
        details_response = requests.get(details_url, params=details_params)
        details_data = details_response.json()

        if "extendedIngredients" in details_data:
            ingredients = [ingredient["name"] for ingredient in details_data["extendedIngredients"]]
            return ingredients

    return []

def extract_text_from_image(image_path):
    """Extract text from an image using OCR."""
    image = Image.open(image_path)
    text = pytesseract.image_to_string(image)
    return text

def detect_allergies_from_ingredients(ingredients, user_id):
    """Detect allergies from a list of ingredients."""
    # Get user's allergies from their profile
    user_allergies = user_profiles.get(user_id, [])
    if not user_allergies:
        return "No allergies found in your profile. Please create a profile first."

    # Split ingredients if it's a string
    if isinstance(ingredients, str):
        ingredients = [ingredient.strip() for ingredient in ingredients.split(",")]

    # Categorize ingredients into safe and unsafe
    safe_ingredients = []
    unsafe_ingredients = []

    for ingredient in ingredients:
        allergy = get_allergy(ingredient)
        if allergy in user_allergies:
            unsafe_ingredients.append((ingredient, allergy))
        else:
            safe_ingredients.append((ingredient, allergy))

    # Generate result message
    result = "**Ingredients & Allergies:**\n"

    if unsafe_ingredients:
        result += "🚫 **Unsafe Ingredients (Do Not Eat):**\n"
        for ingredient, allergy in unsafe_ingredients:
            result += f"- {ingredient}: {allergy}\n"
    else:
        result += "✅ **No unsafe ingredients detected.**\n"

    if safe_ingredients:
        result += "\n✅ **Safe Ingredients:**\n"
        for ingredient, allergy in safe_ingredients:
            result += f"- {ingredient}: {allergy}\n"

    return result

def detect_allergies_from_image(image_path, user_id):
    """Complete process: Predict food, extract ingredients, and detect allergies."""
    predicted_food = predict_food(image_path)
    raw_ingredients = get_ingredients_from_spoonacular(predicted_food)

    if not raw_ingredients:
        return f"Could not find ingredients for {predicted_food}"

    return detect_allergies_from_ingredients(raw_ingredients, user_id)

def detect_allergies_from_ocr(image_path, user_id):
    """Detect allergies from text extracted using OCR."""
    # Extract text from the image
    text = extract_text_from_image(image_path)

    # Split text into ingredients (assuming ingredients are separated by commas or newlines)
    ingredients = [ingredient.strip() for ingredient in re.split(r"[\n,]", text) if ingredient.strip()]

    return detect_allergies_from_ingredients(ingredients, user_id)

def create_profile(user_id, allergies):
    """Create or update a user profile with their allergies."""
    # Split comma-separated allergies into a list
    allergies_list = [allergy.strip() for allergy in allergies.split(",")]
    user_profiles[user_id] = allergies_list
    return f"Profile created/updated for user {user_id} with allergies: {', '.join(allergies_list)}"

def recommend_alternatives(user_input):
    """Recommend alternatives for the user's allergy using fuzzy matching."""
    # Use fuzzy matching to find the closest allergy name
    closest_match, score = process.extractOne(user_input, allergy_names)

    if score > 80:  # If confidence is high, return alternatives
        alternatives = allergy_to_alternatives.get(closest_match, [])
        if alternatives:
            return f"Here are some safe alternatives for '{closest_match}':\n" + "\n".join(f"- {alt}" for alt in alternatives)
        else:
            return f"No alternatives found for '{closest_match}'."
    else:
        return "Sorry, we couldn't find any matching allergies. Please try again."

# Gradio UI
with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown(
        """
        # 🍽️ AI Food Allergy Detector
        **Welcome!** This app helps you detect allergens in your food and recommends safe alternatives.
        """
    )

    with gr.Tab("👤 Create Profile"):
        gr.Markdown("### Create or Update Your Profile")
        with gr.Row():
            user_id_input = gr.Textbox(label="Enter User ID", placeholder="e.g., user123")
            allergies_input = gr.Textbox(label="Enter Your Allergies (comma-separated)", placeholder="e.g., peanuts, shellfish")
        create_profile_button = gr.Button("Create/Update Profile", variant="primary")
        profile_output = gr.Textbox(label="Profile Status", interactive=False)

    with gr.Tab("🔍 Detect Allergies"):
        gr.Markdown("### Detect Allergies in Your Food")
        with gr.Row():
            user_id_allergy_check = gr.Textbox(label="Enter User ID", placeholder="e.g., user123")
        with gr.Tabs():
            with gr.Tab("📷 Upload Food Image"):
                image_input = gr.Image(type="filepath", label="Upload Food Image")
                detect_image_button = gr.Button("Detect Allergies from Image", variant="primary")
            with gr.Tab("✍️ Enter Ingredients"):
                ingredients_input = gr.Textbox(label="Enter Ingredients (comma-separated)", placeholder="e.g., peanuts, bread, milk")
                detect_ingredients_button = gr.Button("Detect Allergies from Ingredients", variant="primary")
            with gr.Tab("📄 Upload Ingredient Label (OCR)"):
                ocr_image_input = gr.Image(type="filepath", label="Upload Ingredient Label")
                detect_ocr_button = gr.Button("Detect Allergies from Label", variant="primary")
        allergy_output = gr.Textbox(label="Detection Results", interactive=False)

    with gr.Tab("🌟 Recommend Alternatives"):
        gr.Markdown("### Get Safe Alternatives for Your Allergy")
        user_input_allergy = gr.Textbox(label="Describe Your Allergy", placeholder="e.g., I'm allergic to nuts")
        recommend_button = gr.Button("Recommend Alternatives", variant="primary")
        alternatives_output = gr.Textbox(label="Recommended Alternatives", interactive=False)

    # Link functions to buttons
    create_profile_button.click(create_profile, inputs=[user_id_input, allergies_input], outputs=profile_output)
    detect_image_button.click(detect_allergies_from_image, inputs=[image_input, user_id_allergy_check], outputs=allergy_output)
    detect_ingredients_button.click(detect_allergies_from_ingredients, inputs=[ingredients_input, user_id_allergy_check], outputs=allergy_output)
    detect_ocr_button.click(detect_allergies_from_ocr, inputs=[ocr_image_input, user_id_allergy_check], outputs=allergy_output)
    recommend_button.click(recommend_alternatives, inputs=[user_input_allergy], outputs=alternatives_output)

# Launch the Gradio app
demo.launch(share=True)  # Set share=True to get a public link

# Data structure to store user profiles (in memory)
user_profiles = {}

alternatives_data = pd.read_excel("allergealternatives.xlsx")

# Create a mapping between allergies and alternatives
allergy_to_alternatives = alternatives_data.groupby("Allergy Name")["Alternatives"].apply(list).to_dict()

# Get a list of all allergy names for fuzzy matching
allergy_names = list(allergy_to_alternatives.keys())

def clean_ingredient(ingredient):
    """Normalize ingredient names (remove prefixes, lowercase)"""
    ingredient = ingredient.lower().strip()
    ingredient = re.sub(r'\b(' + '|'.join(PREFIXES) + r')\b', '', ingredient).strip()
    return ingredient

def get_allergy(ingredient):
    """Check if ingredient has an associated allergy"""
    ingredient = clean_ingredient(ingredient)
    if ingredient in lookup_dict:
        return lookup_dict[ingredient]

    # Use fuzzy matching if exact match isn't found
    closest_match, score = process.extractOne(ingredient, lookup_dict.keys())
    if score > 80:  # If confidence is high, return the closest match
        return lookup_dict[closest_match]

    return "Unknown Allergy"

def predict_food(image_path):
    """Predict the food item from the image."""
    predictions = classifier(image_path)

    # Select the most confident prediction
    top_prediction = max(predictions, key=lambda x: x['score'])
    predicted_food = top_prediction['label']

    print(f"Predicted Food: {predicted_food} (Confidence: {top_prediction['score']:.2f})")
    return predicted_food

def get_ingredients_from_spoonacular(food_name):
    """Fetch raw ingredient breakdown using Spoonacular API."""
    url = "https://api.spoonacular.com/recipes/complexSearch"
    params = {
        "query": food_name,
        "number": 1,  # Get the best match
        "apiKey": SPOONACULAR_API_KEY
    }

    response = requests.get(url, params=params)
    data = response.json()

    if "results" in data and len(data["results"]) > 0:
        recipe_id = data["results"][0]["id"]

        # Fetch recipe details to get ingredients
        details_url = f"https://api.spoonacular.com/recipes/{recipe_id}/information"
        details_params = {"apiKey": SPOONACULAR_API_KEY}
        details_response = requests.get(details_url, params=details_params)
        details_data = details_response.json()

        if "extendedIngredients" in details_data:
            ingredients = [ingredient["name"] for ingredient in details_data["extendedIngredients"]]
            return ingredients

    return []

def extract_text_from_image(image_path):
    """Extract text from an image using OCR."""
    image = Image.open(image_path)
    text = pytesseract.image_to_string(image)
    return text

def detect_allergies_from_ingredients(ingredients, user_id):
    """Detect allergies from a list of ingredients."""
    # Get user's allergies from their profile
    user_allergies = user_profiles.get(user_id, [])
    if not user_allergies:
        return "No allergies found in your profile. Please create a profile first."

    # Split ingredients if it's a string
    if isinstance(ingredients, str):
        ingredients = [ingredient.strip() for ingredient in ingredients.split(",")]

    # Categorize ingredients into safe and unsafe
    safe_ingredients = []
    unsafe_ingredients = []

    for ingredient in ingredients:
        allergy = get_allergy(ingredient)
        if allergy in user_allergies:
            unsafe_ingredients.append((ingredient, allergy))
        else:
            safe_ingredients.append((ingredient, allergy))

    # Generate result message
    result = "**Ingredients & Allergies:**\n"

    if unsafe_ingredients:
        result += "🚫 **Unsafe Ingredients (Do Not Eat):**\n"
        for ingredient, allergy in unsafe_ingredients:
            result += f"- {ingredient}: {allergy}\n"
    else:
        result += "✅ **No unsafe ingredients detected.**\n"

    if safe_ingredients:
        result += "\n✅ **Safe Ingredients:**\n"
        for ingredient, allergy in safe_ingredients:
            result += f"- {ingredient}: {allergy}\n"

    return result

def detect_allergies_from_image(image_path, user_id):
    """Complete process: Predict food, extract ingredients, and detect allergies."""
    predicted_food = predict_food(image_path)
    raw_ingredients = get_ingredients_from_spoonacular(predicted_food)

    if not raw_ingredients:
        return f"Could not find ingredients for {predicted_food}"

    return detect_allergies_from_ingredients(raw_ingredients, user_id)

def detect_allergies_from_ocr(image_path, user_id):
    """Detect allergies from text extracted using OCR."""
    # Extract text from the image
    text = extract_text_from_image(image_path)

    # Split text into ingredients (assuming ingredients are separated by commas or newlines)
    ingredients = [ingredient.strip() for ingredient in re.split(r"[\n,]", text) if ingredient.strip()]

    return detect_allergies_from_ingredients(ingredients, user_id)

def create_profile(user_id, allergies):
    """Create or update a user profile with their allergies."""
    # Split comma-separated allergies into a list
    allergies_list = [allergy.strip() for allergy in allergies.split(",")]
    user_profiles[user_id] = allergies_list
    return f"Profile created/updated for user {user_id} with allergies: {', '.join(allergies_list)}"

def recommend_alternatives(user_input):
    """Recommend alternatives for the user's allergy using fuzzy matching."""
    # Use fuzzy matching to find the closest allergy name
    closest_match, score = process.extractOne(user_input, allergy_names)

    if score > 80:  # If confidence is high, return alternatives
        alternatives = allergy_to_alternatives.get(closest_match, [])
        if alternatives:
            return f"Here are some safe alternatives for '{closest_match}':\n" + "\n".join(f"- {alt}" for alt in alternatives)
        else:
            return f"No alternatives found for '{closest_match}'."
    else:
        return "Sorry, we couldn't find any matching allergies. Please try again."

def extract_audio_from_video(video_path):
    """Extract audio from a video file."""
    video = mp.VideoFileClip(video_path)
    audio_path = "extracted_audio.wav"
    video.audio.write_audiofile(audio_path)
    return audio_path

def transcribe_audio(audio_path):
    """Transcribe audio to text using speech recognition."""
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio_path) as source:
        audio = recognizer.record(source)
    try:
        text = recognizer.recognize_google(audio)
        return text
    except sr.UnknownValueError:
        return "Could not understand the audio."
    except sr.RequestError:
        return "Could not request results from the speech recognition service."

def detect_allergies_from_video(video_path, user_id):
    """Detect allergies from a recipe video."""
    # Extract audio from the video
    audio_path = extract_audio_from_video(video_path)

    # Transcribe audio to text
    text = transcribe_audio(audio_path)

    # Extract ingredients from the transcribed text (basic keyword matching)
    ingredients = []
    for ingredient in lookup_dict.keys():
        if ingredient in text.lower():
            ingredients.append(ingredient)

    if not ingredients:
        return "No ingredients found in the video. Please try again."

    return detect_allergies_from_ingredients(ingredients, user_id)

# Gradio UI
with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown(
        """
        # 🍽️ AI Food Allergy Detector
        **Welcome!** This app helps you detect allergens in your food and recommends safe alternatives.
        """
    )

    with gr.Tab("👤 Create Profile"):
        gr.Markdown("### Create or Update Your Profile")
        with gr.Row():
            user_id_input = gr.Textbox(label="Enter User ID", placeholder="e.g., user123")
            allergies_input = gr.Textbox(label="Enter Your Allergies (comma-separated)", placeholder="e.g., peanuts, shellfish")
        create_profile_button = gr.Button("Create/Update Profile", variant="primary")
        profile_output = gr.Textbox(label="Profile Status", interactive=False)

    with gr.Tab("🔍 Detect Allergies"):
        gr.Markdown("### Detect Allergies in Your Food")
        with gr.Row():
            user_id_allergy_check = gr.Textbox(label="Enter User ID", placeholder="e.g., user123")
        with gr.Tabs():
            with gr.Tab("📷 Upload Food Image"):
                image_input = gr.Image(type="filepath", label="Upload Food Image")
                detect_image_button = gr.Button("Detect Allergies from Image", variant="primary")
            with gr.Tab("✍️ Enter Ingredients"):
                ingredients_input = gr.Textbox(label="Enter Ingredients (comma-separated)", placeholder="e.g., peanuts, bread, milk")
                detect_ingredients_button = gr.Button("Detect Allergies from Ingredients", variant="primary")
            with gr.Tab("📄 Upload Ingredient Label (OCR)"):
                ocr_image_input = gr.Image(type="filepath", label="Upload Ingredient Label")
                detect_ocr_button = gr.Button("Detect Allergies from Label", variant="primary")
            with gr.Tab("🎥 Upload Recipe Video"):
                video_input = gr.Video(label="Upload Recipe Video")  # Removed `type="filepath"`
                detect_video_button = gr.Button("Detect Allergies from Video", variant="primary")
        allergy_output = gr.Textbox(label="Detection Results", interactive=False)

    with gr.Tab("🌟 Recommend Alternatives"):
        gr.Markdown("### Get Safe Alternatives for Your Allergy")
        user_input_allergy = gr.Textbox(label="Describe Your Allergy", placeholder="e.g., I'm allergic to nuts")
        recommend_button = gr.Button("Recommend Alternatives", variant="primary")
        alternatives_output = gr.Textbox(label="Recommended Alternatives", interactive=False)

    # Link functions to buttons
    create_profile_button.click(create_profile, inputs=[user_id_input, allergies_input], outputs=profile_output)
    detect_image_button.click(detect_allergies_from_image, inputs=[image_input, user_id_allergy_check], outputs=allergy_output)
    detect_ingredients_button.click(detect_allergies_from_ingredients, inputs=[ingredients_input, user_id_allergy_check], outputs=allergy_output)
    detect_ocr_button.click(detect_allergies_from_ocr, inputs=[ocr_image_input, user_id_allergy_check], outputs=allergy_output)
    detect_video_button.click(detect_allergies_from_video, inputs=[video_input, user_id_allergy_check], outputs=allergy_output)
    recommend_button.click(recommend_alternatives, inputs=[user_input_allergy], outputs=alternatives_output)

# Launch the Gradio app
demo.launch(share=True)